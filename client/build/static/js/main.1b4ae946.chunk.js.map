{"version":3,"sources":["features/Admin/LoginSlice.js","features/Admin/Login.js","features/counter/counterAPI.js","features/counter/counterSlice.js","app/sagas/requests/login.js","app/sagas/handlers/login.js","features/Dashboard/dashboardSlice.js","app/sagas/requests/tasks.js","app/sagas/handlers/tasks.js","app/sagas/rootSaga.js","app/store.js","features/Dashboard/tasksChart.js","features/Dashboard/taskModal.js","features/Dashboard/dashboard.js","features/AuthRoute.js","features/Notfound.js","features/Dashboard/addTasks/tasks.js","App.js","serviceWorker.js","index.js"],"names":["LoginSlice","createSlice","name","initialState","reducers","login","state","action","console","log","loginSuccessful","localStorage","getItem","loggedIn","logout","removeItem","actions","Login","authenticated","location","dispatch","useDispatch","history","useHistory","useSelector","useState","username","password","values","setValues","useEffect","push","valuesChangeEvent","event","target","value","className","type","id","placeholder","onChange","onClick","e","fetchCount","amount","Promise","resolve","setTimeout","data","incrementAsync","createAsyncThunk","a","response","counterSlice","status","increment","decrement","incrementByAmount","payload","extraReducers","builder","addCase","pending","fulfilled","requestLogin","axios","post","handleLogin","call","res","setItem","_id","put","DashboardSlice","tasks","task","taskStatus","getTasks","postTasks","putTasks","updateTasks","current","Array","isArray","updateTask","map","item","completed","createdAt","updatedAt","deleteTasks","removeTasks","filter","getTask","taskGet","get","taskPost","taskPut","taskDelete","delete","handleTaskGet","handleTaskPost","handleTaskPut","handleTaskDelete","delay","watcherSaga","takeLatest","sagaMiddleware","createSagaMiddleware","createBrowserHistory","reducer","combineReducers","router","connectRouter","loginReducer","dashboardReducer","store","configureStore","middleware","getDefaultMiddleware","thunk","routerMiddleware","run","TaskChart","completedTasks","labels","datasets","label","backgroundColor","borderColor","borderWidth","setData","newdata","prevState","options","responsive","maintainAspectRatio","TaskModal","props","setName","Modal","size","aria-labelledby","centered","Header","closeButton","Title","Body","undefined","onHide","Dashboard","showModal","setshowModal","topTasks","setTopTasks","selectedTask","setSelectedTask","totaltasks","length","x","i","sendTasktoModal","sort","b","top3","slice","preventDefault","Fragment","show","index","checked","newtask","aria-label","deletetaskWithId","aria-hidden","disabled","AuthRoute","Component","component","render","rest","to","pathname","from","NotFound","Tasks","useParams","mentor","mentors","email","errors","setErrors","Object","keys","required","style","color","alert","arr","formIsValid","match","lastAtPos","lastIndexOf","lastDotPos","indexOf","handleValidation","mentordata","App","exact","path","Boolean","window","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1b4ae946.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\n\nconst initialState = [];\n\nconst LoginSlice = createSlice({\n    name: 'admin',\n    initialState,\n    reducers: {\n        login(state, action) {\n            console.log(state);\n        },\n        loginSuccessful(state,action){\n            console.log('item available');\n            console.log(localStorage.getItem('userId'));\n            if(localStorage.getItem('userId')) {\n\n                let data = {loggedIn: true};\n                return {...state, ...data};\n            }\n        },\n        logout(state,action){\n            let data ={loggedIn:false};\n            localStorage.removeItem('userId');\n            return {...state,...data};\n        }\n    }\n});\n\nexport const { login,loginSuccessful,logout} = LoginSlice.actions;\n\nexport default LoginSlice.reducer\n","\nimport { useSelector, useDispatch } from 'react-redux';\nimport React, {useEffect, useState} from 'react';\nimport {login, loginSuccessful} from \"./LoginSlice\";\nimport { Redirect } from 'react-router-dom';\nimport { useHistory } from \"react-router\";\nimport  './login.css';\nexport function Login ({authenticated, location}) {\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const loggedIn = useSelector(state => state.login.loggedIn);\n    const [values, setValues] = useState({\n        username: '',\n        password: ''\n    });\n    useEffect(()=>{\n        dispatch(loginSuccessful(values));\n        if(loggedIn){\n            history.push('/dashboard');\n        }\n    },[loggedIn]);\n    const valuesChangeEvent= (event)=> {\n        setValues((values) => ({\n            ...values,\n            [event.target.name]: event.target.value,\n        }));\n    };\n    const handleSubmit = (e) => {\n        dispatch(login(values));\n        history.push('/dashboard');\n    };\n\n    return (\n        <div className=\"container-fluid h-100\">\n            <div className=\"row h-100 justify-content-center align-items-center\">\n                <div className=\"card p-3 mb-5 bg-white\">\n                    <div className=\"card-body\">\n                        <h5 className=\"row card-title loginTitle\">Login</h5>\n                <form>\n                    <div className=\"form-group row\">\n                        <input type=\"text\" className=\"form-control\" id=\"email\"\n                               placeholder=\"Enter email\" name=\"username\"  value={values.username} onChange={valuesChangeEvent}/>\n                    </div>\n                    <div className=\"form-group row\">\n                        <input type=\"password\" className=\"form-control\" id=\"password\"\n                               placeholder=\"Password\" name=\"password\" value={values.password} onChange={valuesChangeEvent}/>\n                    </div>\n                    <div className=\"form-group row\">\n                        <button type=\"button\" className=\"btn btn-primary btnColor form-control\" onClick={handleSubmit}>Login</button>\n                    </div>\n                </form>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n)\n}\n\n","// A mock function to mimic making an async request for data\nexport function fetchCount(amount = 1) {\n  return new Promise((resolve) =>\n    setTimeout(() => resolve({ data: amount }), 500)\n  );\n}\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchCount } from './counterAPI';\n\nconst initialState = {\n  value: 0,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount) => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;\n","import axios from 'axios';\n\nexport function requestLogin(action){\n    console.log('login' +action.payload);\n    return axios.post('/login',action.payload);\n}\n\n","import {call,put} from 'redux-saga/effects';\nimport {requestLogin} from \"../requests/login\";\nimport {loginSuccessful,logout} from \"../../../features/Admin/LoginSlice\";\nexport function *handleLogin(action) {\n    try {\n        console.log(action);\n        const res = yield call(requestLogin, action);\n        console.log(res.data);\n        if(res.data !== 'No user found') {\n            localStorage.setItem('userId', res.data._id);\n            yield put(loginSuccessful(res.data));\n        } else throw 'No user found';\n\n    } catch(err){\n        console.log(err);\n        localStorage.removeItem('userId');\n        logout();\n    }\n}\n","import { createSlice, current } from '@reduxjs/toolkit'\n\nconst initialState = {\n    tasks:[],\n    task:{},\n    taskStatus:''\n};\n\nconst DashboardSlice = createSlice({\n    name: 'tasks',\n    initialState,\n    reducers: {\n        getTasks() {\n        },\n        postTasks() {\n        },\n        putTasks() {\n\n        },\n        updateTasks(state,action){\n            console.log(current(state.tasks));\n                if(Array.isArray(action.payload)) {\n                    state.tasks = action.payload;\n                    state.taskStatus = '';\n                } else if(typeof action.payload === \"string\"){\n                    state.taskStatus = action.payload.taskStatus;\n                    state.tasks = [];\n                }else {\n                    state.taskStatus = '';\n                    state.tasks = [...state.tasks, action.payload];\n                }\n\n\n        },\n        updateTask(state,action) {\n            console.log(action.payload);\n            state.taskStatus = '';\n            state.tasks = state.tasks.map((item) => (\n                item._id===action.payload._id? {...item, task: action.payload.task,completed:action.payload.completed,createdAt:action.payload.createdAt, updatedAt: action.payload.updatedAt}: item))\n        },\n        deleteTasks(){\n        },\n        removeTasks(state, action){\n            return {\n                tasks:[\n                    ...state.tasks.filter(task => task._id !== action.payload._id)\n                ],\n                taskStatus:''\n            }\n        },\n        getTask(state,action){\n            console.log(action);\n            state.task = state.tasks.filter(task => task._id=== action.payload)[0];\n        }\n    }\n});\n\nexport const { getTasks,updateTasks,deleteTasks, postTasks,removeTasks, getTask,putTasks, updateTask} = DashboardSlice.actions;\n\nexport default DashboardSlice.reducer\n","import axios from 'axios';\nimport {put} from 'redux-saga/effects';\nexport function taskGet(action){\n    console.log(action.payload);\n    if(action.payload) {\n        return axios.get(`/tasks?name=${action.payload}`);\n    } else\n        return axios.get('/tasks');\n}\n\nexport function taskPost(action) {\n     console.log('task post' +action);\n    return axios.post('/tasks',action.payload);\n\n}\nexport function taskPut(action) {\n    console.log('task put' +action);\n    return axios.put(`/tasks/${action.payload._id}`,action.payload);\n\n}\n\nexport function taskDelete(action) {\n    console.log('task delete' +action.payload);\n    return axios.delete(`/tasks/${action.payload}`);\n\n}\n","import {call,put, delay} from 'redux-saga/effects';\nimport {taskGet, taskPut,taskPost, taskDelete} from \"../requests/tasks\";\nimport {updateTasks, removeTasks, updateTask} from \"../../../features/Dashboard/dashboardSlice\";\n\nexport function *handleTaskGet(action) {\n    try {\n        if(action.payload){\n            yield delay(300);\n        }\n        const res = yield call(taskGet, action);\n        console.log(res.data);\n        yield put(updateTasks(res.data));\n    } catch(err){\n        console.log(err);\n    }\n}\n\nexport function *handleTaskPost(action) {\n    try {\n        console.log(action);\n        const res = yield call(taskPost, action);\n        yield put(updateTasks(res.data));\n        console.log(res);\n    } catch(err) {\n        console.log(err);\n    }\n}\n\nexport function *handleTaskPut(action) {\n    try {\n        console.log(action);\n        const res = yield call(taskPut, action);\n        yield put(updateTask(res.data));\n        console.log(res);\n    } catch(err) {\n        console.log(err);\n    }\n}\n\nexport function *handleTaskDelete(action) {\n    try {\n        console.log(action);\n        const res = yield call(taskDelete, action);\n        yield put(removeTasks(res.data));\n        console.log(res);\n    } catch(err) {\n        console.log(err);\n    }\n}\n\n","import {takeLatest} from 'redux-saga/effects';\nimport {login} from '../../features/Admin/LoginSlice';\nimport {handleLogin} from \"./handlers/login\";\nimport {getTasks,deleteTasks, postTasks,putTasks} from '../../features/Dashboard/dashboardSlice';\nimport {handleTaskDelete, handleTaskGet, handleTaskPost, handleTaskPut} from \"./handlers/tasks\";\n\nexport function *watcherSaga(){\n    yield takeLatest(login, handleLogin);\n    yield takeLatest(getTasks, handleTaskGet);\n    yield takeLatest(postTasks, handleTaskPost);\n    yield takeLatest(deleteTasks, handleTaskDelete);\n    yield takeLatest(putTasks, handleTaskPut);\n}\n","import { configureStore, getDefaultMiddleware, combineReducers } from '@reduxjs/toolkit';\nimport createSagaMiddleware from 'redux-saga'\nimport counterReducer from '../features/counter/counterSlice';\nimport {watcherSaga} from './sagas/rootSaga';\nimport loginReducer from \"../features/Admin/LoginSlice\";\nimport dashboardReducer from \"../features/Dashboard/dashboardSlice\";\nimport { createBrowserHistory } from 'history';\nimport { routerMiddleware, connectRouter } from 'connected-react-router';\nconst sagaMiddleware = createSagaMiddleware();\nexport const history = createBrowserHistory();\nconst reducer = combineReducers({\n    router: connectRouter(history),\n    login:loginReducer,\n    tasks:dashboardReducer\n\n});\nexport const store = configureStore({\n  reducer,\n    middleware:[...getDefaultMiddleware({thunk:false}),sagaMiddleware,routerMiddleware(history)]\n});\n\nsagaMiddleware.run(watcherSaga);\n","import React, {useEffect, useState} from 'react';\nimport { Pie } from 'react-chartjs-2';\nimport './chart.css';\n\n\n\nexport function TaskChart({completedTasks,tasks}) {\n    const [data, setData] = useState({\n        labels: ['Completed','Pending'],\n        datasets: [\n            {\n                label: '# of Tasks',\n                backgroundColor: [\n                    '#5285EC',\n                    '#E8ECEC'\n\n                ],\n                borderColor: [\n                    '#F4F4F6',\n                    '#F4F4F6'\n                ],\n                borderWidth: 1,\n            },\n        ],\n    });\n\n    useEffect(()=> {\n        console.log(completedTasks, tasks);\n       let newdata = {...data};\n       newdata.datasets[0].data = [completedTasks,tasks-completedTasks];\n        if(data.datasets) {\n            setData((prevState) => ({...prevState, ...newdata}))\n        }\n     console.log(data)},[completedTasks,tasks]);\n\n    return (\n        <div className=\"chart-container\">\n            <Pie data={data} options={{\n                responsive: true,\n                maintainAspectRatio: false,\n            }}/>\n        </div>\n    )\n};\n\n","import {Modal,ModalTitle} from \"react-bootstrap\";\nimport React, {useEffect, useState} from 'react';\nimport { useDispatch } from 'react-redux';\nimport {postTasks,putTasks} from './dashboardSlice';\nexport function TaskModal(props) {\n    console.log(props.task);\n    const [name,setName] = useState( '');\n    const dispatch = useDispatch();\n    const handleChange = (e) =>\n        setName(e.target.value);\n    const createTask = () => {\n      let task = {\n          _id:props.task?props.task._id:undefined,\n          task:name,\n          completed:false\n      };\n      if(props.task){\n          dispatch(putTasks(task));\n      }else {\n          dispatch(postTasks(task));\n      }\n    props.onHide();\n    };\n    useEffect(() => {\n        console.log(props.task);\n        if(props.task) {\n            setName(props.task.task);\n        } else {\n            setName('');\n        }\n    },[props.task]);\n    return (\n        <Modal\n            {...props}\n            size=\"sm\"\n            aria-labelledby=\"contained-modal-title-vcenter\"\n            centered\n        >\n            <Modal.Header closeButton>\n                <Modal.Title id=\"contained-modal-title-vcenter\">\n                    <p className=\"taskHeader\">{props.task? 'Edit Task':'+New Task'}</p>\n                </Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <div className=\"form-group col-md-12\">\n                    <input type=\"text\" className=\"form-control\" id=\"email\"\n                           placeholder=\"Enter task\" name=\"task\" value={name} onChange={handleChange}/>\n                </div>\n                <div className=\"form-group col-md-12 \">\n                    <button type=\"button\" className=\"btn btn-primary btnColor form-control\" onClick={createTask} >{props.task? 'Edit Task':'+New Task'}</button>\n                </div>\n            </Modal.Body>\n        </Modal>\n    );\n}\n","import React, {useEffect, useState} from 'react';\n// import {Button} from \"react-bootstrap\";\nimport {logout} from \"../Admin/LoginSlice\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport {getTasks, deleteTasks,putTasks} from \"./dashboardSlice\";\nimport { useHistory } from \"react-router\";\nimport {TaskChart} from './tasksChart';\nimport  './dashboard.css';\nimport {TaskModal} from './taskModal';\nexport function Dashboard(){\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const tasks = useSelector(state => state.tasks.tasks);\n    const taskStatus = useSelector(state => state.tasks.taskStatus);\n    const [showModal,setshowModal] = useState(false);\n    const [topTasks,setTopTasks] = useState([]);\n    const [selectedTask,setSelectedTask] = useState(null);\n    const totaltasks = tasks.length;\n    const completedTasks = tasks.filter((x,i) => { return x.completed; }).length;\n    const logoutFromApp = (e) => {\n        e.preventDefault();\n        dispatch(logout());\n\n    };\n    const switchRoute = (e) => {\n        history.push('/mentor');\n\n    };\n    function deletetaskWithId(index){\n        let id = tasks[index]._id;\n        dispatch(deleteTasks(id));\n    }\n    function editTask(index){\n        let id = tasks[index]._id;\n        history.push(`/mentor/${id}`);\n    }\n    useEffect(()=>{\n        dispatch(getTasks());\n    },[]);\n\n    const sendTasktoModal= (task) => {\n        setSelectedTask(task);\n        setshowModal(true);\n    };\n    const updateTask =(e,task) => {\n        console.log(e.target.checked);\n        console.log(task);\n        let newtask = {...task};\n        newtask.completed = e.target.checked;\n        console.log(newtask);\n        dispatch(putTasks(newtask));\n    };\n    const searchTask =(e) => {\n        console.log(e.target.value);\n        dispatch(getTasks(e.target.value));\n    }\n    useEffect(()=>{\n        console.log(tasks);\n        let topTasks = [...tasks];\n        topTasks.sort((a,b) => (a.createdAt < b.createdAt) ? 1 : ((b.createdAt < a.createdAt) ? -1 : 0));\n        let top3 = topTasks.slice(0,3);\n        console.log(top3);\n        setTopTasks((prevState => ([\n            ...top3\n        ])));\n    },[tasks]);\n    return (\n        <div className=\"container-fluid\">\n            <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n                <h5>Welcome</h5>\n                <div className=\"ml-auto\">\n                    <button type=\"button\" className=\"btn btn-light\" onClick={logoutFromApp}>Logout</button>\n                </div>\n            </nav>\n            {tasks.length >0 || taskStatus !== ''?<React.Fragment>\n                <div className=\"row justify-content-center align-items-center\">\n                    <div className=\"card topcards col-sm-12 col-md-3 p-3 mb-2 mb-sm-0  ml-md-2 mt-5 bg-white \">\n                        <div className=\"card-body\">\n                            <h5 className=\"cardtitle\">Tasks Completed</h5>\n                            <span><h2>{completedTasks}/{totaltasks}</h2></span>\n                        </div>\n                    </div>\n                    <div className=\"card topcards col-sm-12 col-md-3 p-3 ml-md-2 mb-2 mb-sm-0 mt-md-5 bg-white\">\n                        <div className=\"card-body\">\n                            <h5 className=\"cardtitle\"> Latest Tasks Created</h5>\n                            <ul>\n                                {topTasks.length>0?topTasks.map((task)=>\n                                    <li key={task._id}>\n                                        <span className={task.completed===true?`lineText`:'textColor'}>{task.task}</span>\n                                    </li>\n                                ):null}\n                            </ul>\n                        </div>\n                    </div>\n                    <div className=\"card topcards col-sm-12 col-md-3 p-3 ml-md-2 mb-2 mb-sm-0  mt-md-5 bg-white\">\n                        <div className=\"card-body\">\n                            <TaskChart completedTasks={completedTasks} tasks={tasks.length}/>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"row offset-md-1 col-md-9 col-sm-12 mt-5\">\n                    <span className='taskHeader offset-md-1 col-md-3 col-sm-12 mb-2 mb-sm-0'>Tasks</span>\n                    <input type=\"text\" className=\"form-control col-md-2 col-sm-12 ml-md-auto mb-2 mb-sm-0\" id=\"task\"\n                           placeholder=\"search task\" name=\"task\" onChange={searchTask}/>\n                    <button className=\"btn btn-primary btnColor ml-md-2 ml-sm-0 col-md-2 col-sm-12 mt-md-0 mt-sm-2 mb-2 mb-sm-0 \" onClick={() => sendTasktoModal(null)}>New task</button>\n                    <TaskModal\n                        show={showModal}\n                        task={selectedTask}\n                        onHide={() => setshowModal(false)}\n                    />\n                </div>\n                <div className=\"row justify-content-center align-items-center\">\n                    <div className=\"card col-md-9 mt-3\">\n                        <div className=\"card-body\">\n                            <div>\n                                {tasks.length>0?tasks.map((task, index)=>\n                                    <div key={index+\"task\"} className=\"row underline col-md-12 col-sm-12 mt-3\">\n                                        <div className=\"checkbox\">\n                                            <input type=\"checkbox\" checked={task.completed} onChange={(e)=> updateTask(e, task)}/><span className={task.completed===true?`taskHeaderwithline col-md-3 col-sm-12`:'taskHeader col-md-3 col-sm-12'}> {task.task}</span>\n                                        </div>\n                                        <div className=\"ml-md-auto\">\n                                            <button type=\"button\" className=\"btn btn-default\" aria-label=\"Left Align\" onClick={()=>deletetaskWithId(index)}>\n                                                <span className=\"fa fa-trash-o fa-lg\" aria-hidden=\"true\"></span>\n                                            </button>\n                                            <button type=\"button\" className=\"btn btn-default\" aria-label=\"Left Align\" disabled={task.completed} onClick={() => sendTasktoModal(task)}>\n                                                <span className=\"fa fa-edit fa-lg\" aria-hidden=\"true\"></span>\n                                            </button>\n                                        </div>\n                                    </div>\n                                ):null}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </React.Fragment>:\n                <div className=\"row notaskCard justify-content-center align-items-center\">\n                    <div className=\"card p-3 mb-5 bg-white\">\n                        <div className=\"card-body\">\n                            <h5 className=\"row card-title loginTitle\">You have no tasks</h5>\n                            <button className=\"btn btn-primary btnColor ml-md-2 ml-sm-0 col-md-12 col-sm-12 mt-md-0 mt-sm-2 mb-2 mb-sm-0\" onClick={() => sendTasktoModal(null)}>New task</button>\n                        </div>\n                    </div>\n\n                <TaskModal\n                    show={showModal}\n                    task={selectedTask}\n                    onHide={() => setshowModal(false)}\n                />\n                </div>}\n        </div>\n\n\n    )\n}\n","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\n\nfunction AuthRoute({ authenticated, component: Component, render, ...rest }) {\n    return (\n        <Route\n            {...rest}\n            render={props =>\n                authenticated ? (\n                    render ? render(props) : <Component {...props} />\n                ) : (\n                    <Redirect\n                        to={{ pathname: '/login', state: { from: props.location } }}\n                    />\n                )\n            }\n        />\n    );\n}\n\nexport default AuthRoute;\n","import React from \"react\";\n\nfunction NotFound() {\n    return (\n        <>\n            <h1>Page you are requesting is not found</h1>\n            <p>404.</p>\n        </>\n    );\n}\n\nexport default NotFound;\n","import React, {useEffect, useState} from 'react';\nimport {  useDispatch,useSelector } from 'react-redux';\nimport {postTasks, getTask, putTasks} from \"../../Dashboard/dashboardSlice\";\nimport { useHistory, useParams } from \"react-router\";\nexport function Tasks(){\n    const dispatch = useDispatch();\n    const {id} = useParams();\n    const history = useHistory();\n    const mentor = useSelector(state => state.mentors.mentor);\n    const [values, setValues] = useState({\n        email: '',\n        name: '',\n        task:''\n    });\n    const [errors, setErrors] = useState({});\n    const [tasks, updateTasks] = useState([]);\n\n    useEffect(()=>{\n        console.log(id);\n        if(id){\n            dispatch(getTask(id));\n        }\n\n    },[]);\n    useEffect(() => {\n\n        if(mentor && Object.keys(mentor).length>0 && id) {\n            setValues(values => ({...values, email: mentor.email, name: mentor.name, task:''}));\n            if(mentor.tasks.length>0) {\n                console.log(mentor.tasks.length);\n                updateTasks(values => ([...values, ...mentor.tasks]));\n            }\n        }\n\n    }, [mentor]);\n    console.log(tasks);\n    const valuesChangeEvent= (event)=> {\n        setValues((values) => ({\n            ...values,\n            [event.target.name]: event.target.value,\n        }));\n    };\n    const tasksChangeEvent = () => {\n        if(values.task === ''){\n            alert('Task cannot be empty');\n        } else {\n            updateTasks((arr) => ([\n                ...arr,\n                values.task\n            ]));\n            setValues((values) => ({\n                ...values,\n                'task': '',\n            }));\n        }\n    };\n    function handleValidation(){\n        let errors = {};\n        let formIsValid = true;\n\n        //Name\n        if(!values[\"name\"]){\n            formIsValid = false;\n            errors[\"name\"] = \"Cannot be empty\";\n        }\n\n        if(typeof values[\"name\"] !== \"undefined\"){\n            if(!values[\"name\"].match(/^[a-zA-Z]+$/)){\n                formIsValid = false;\n                errors[\"name\"] = \"Only letters\";\n            }\n        }\n\n        if(!values[\"email\"]){\n            formIsValid = false;\n            errors[\"email\"] = \"Cannot be empty\";\n        }\n\n        if(typeof values[\"email\"] !== \"undefined\"){\n            let lastAtPos = values[\"email\"].lastIndexOf('@');\n            let lastDotPos = values[\"email\"].lastIndexOf('.');\n\n            if (!(lastAtPos < lastDotPos && lastAtPos > 0 && values[\"email\"].indexOf('@@') === -1 && lastDotPos > 2 && (values[\"email\"].length - lastDotPos) > 2)) {\n                formIsValid = false;\n                errors[\"email\"] = \"Email is not valid\";\n            }\n        }\n\n        setErrors((prevState) => ({...prevState,name:errors.name, email:errors.email}));\n        console.log(errors);\n        return formIsValid;\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if(handleValidation()) {\n            let mentordata = {\n                name: values.name,\n                tasks: tasks,\n                email: values.email\n            };\n            if (id) {\n                mentordata._id = id;\n                dispatch(putTasks(mentordata));\n            } else {\n                dispatch(postTasks(mentordata));\n            }\n            history.push('/dashboard');\n        }\n    };\n    return (\n        <div className=\"container-fluid h-100\">\n            <div className=\"row h-100 justify-content-center align-items-center\">\n                <div className=\"card col-6 shadow p-3 mb-5 bg-white\">\n                    <div className=\"card-body\">\n                        <h5 className=\"row card-title\">{id?'Update Mentor':'Add New Mentor'}</h5>\n                        <form>\n                            <div className=\"form-group row\">\n                                <input type=\"text\" className=\"form-control\" id=\"email\"\n                                       placeholder=\"Enter email\" name=\"email\"  value={values.email} onChange={valuesChangeEvent} required/>\n                                <span style={{color: \"red\"}}>{errors.email}</span>\n                            </div>\n                            <div className=\"form-group row\">\n                            <input type=\"name\" className=\"form-control\" id=\"name\"\n                                   placeholder=\"Enter Name\" name=\"name\" value={values.name} onChange={valuesChangeEvent} required/>\n                                <span style={{color: \"red\"}}>{errors.name}</span>\n                        </div>\n                            <div className=\"form-group row\">\n                                {tasks.length>0?<p>List of tasks added</p>:null}\n                            </div>\n\n                            <div className=\"form-group row\">\n                                <ol>{tasks.length>0?\n                                    tasks.map((value, index)=>\n                                        <li key={index}>\n                                            {value}\n                                        </li>\n                                    ):'No tasks added'}</ol>\n                            </div>\n                            <div className=\"form-group row\">\n                                <input type=\"name\" className=\"form-control\" id=\"task\"\n                                       placeholder=\"Enter Task\" name=\"task\" value={values.task} onChange={valuesChangeEvent}/>\n                            </div>\n                            <div className=\"form-group row justify-content-around\">\n                                <button type=\"button\" className=\"btn btn-info form-control col-5 px-md-5\" onClick={tasksChangeEvent}>Add new task</button>\n                                <button type=\"button\" className=\"btn btn-primary form-control col-5\" onClick={handleSubmit}>{id?'Update Mentor':'Add New Mentor'}</button>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n","import React,{useState} from 'react';\nimport {Login} from './features/Admin/Login';\nimport './App.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {history} from \"../src/app/store\";\nimport { ConnectedRouter } from 'connected-react-router';\nimport {Dashboard} from \"./features/Dashboard/dashboard\";\nimport { Link, Route, Switch, Redirect, BrowserRouter as Router } from 'react-router-dom';\nimport AuthRoute from './features/AuthRoute';\nimport NotFound from \"./features/Notfound\";\nimport {Tasks} from \"./features/Dashboard/addTasks/tasks\";\nfunction App() {\n  const authenticated = useSelector(state=> {return state.login.loggedIn});\n  return (\n      <ConnectedRouter history={history}>\n        <Switch>\n            <Redirect exact from=\"/\" to=\"login\" />\n          <Route\n              path=\"/login\"\n              render={props => (\n                  <Login authenticated={authenticated}  {...props}/>\n              )}\n          />\n          <AuthRoute\n              authenticated={authenticated}\n              path=\"/Dashboard\"\n              render={props => <Dashboard {...props} />}\n          />\n            <AuthRoute\n                authenticated={authenticated}\n                path=\"/task/:id?\"\n                render={props => <Tasks {...props} />}\n            />\n          <Route component={NotFound} />\n        </Switch>\n      </ConnectedRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n       <App/>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}